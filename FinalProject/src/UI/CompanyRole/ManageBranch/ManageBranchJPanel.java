/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.CompanyRole.ManageBranch;

import Business.Business;
import Business.Organization.Branch;
import Business.Organization.Company;
import java.awt.List;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JANFAN
 */
public class ManageBranchJPanel extends javax.swing.JPanel {

           /**
            * Creates new form ManageBranchJPanel
            */
           JPanel userProcessContainer;
           Business business;
           Company company;
           JSplitPane SplitPanel;

           public ManageBranchJPanel(JPanel userProcessContainer, Business business, Company company, JSplitPane SplitPanel) {
                      initComponents();
                      this.userProcessContainer = userProcessContainer;
                      this.business = business;
                      this.company = company;
                      this.SplitPanel = SplitPanel;
                      populateManageBranchTable();
           }

           public ManageBranchJPanel(JPanel userProcessContainer, Business business, Branch branch, JSplitPane SplitPanel) {
                      throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
           }

           /**
            * This method is called from within the constructor to initialize the form. WARNING: Do
            * NOT modify this code. The content of this method is always regenerated by the Form
            * Editor.
            */
           @SuppressWarnings("unchecked")
           // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
           private void initComponents() {

                      jLabel1 = new javax.swing.JLabel();
                      jScrollPane1 = new javax.swing.JScrollPane();
                      manageBranchTbl = new javax.swing.JTable();
                      jLabel2 = new javax.swing.JLabel();
                      txtCountry = new javax.swing.JTextField();
                      jLabel3 = new javax.swing.JLabel();
                      txtLocation = new javax.swing.JTextField();
                      btnSearch = new javax.swing.JButton();
                      btnViewDiagram = new javax.swing.JButton();
                      btnCreate = new javax.swing.JButton();
                      btnDelete = new javax.swing.JButton();
                      btnView = new javax.swing.JButton();

                      setBackground(new java.awt.Color(243, 222, 186));

                      jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 36)); // NOI18N
                      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                      jLabel1.setText("MANAGE BRANCH");

                      manageBranchTbl.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
                      manageBranchTbl.setModel(new javax.swing.table.DefaultTableModel(
                                 new Object [][] {
                                            {null, null, null, null},
                                            {null, null, null, null},
                                            {null, null, null, null},
                                            {null, null, null, null}
                                 },
                                 new String [] {
                                            "Name", "Country", "Location", "Money"
                                 }
                      ) {
                                 boolean[] canEdit = new boolean [] {
                                            false, false, false, false
                                 };

                                 public boolean isCellEditable(int rowIndex, int columnIndex) {
                                            return canEdit [columnIndex];
                                 }
                      });
                      jScrollPane1.setViewportView(manageBranchTbl);

                      jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
                      jLabel2.setText("Country");

                      txtCountry.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
                      txtCountry.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

                      jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
                      jLabel3.setText("Location");

                      txtLocation.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
                      txtLocation.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

                      btnSearch.setBackground(new java.awt.Color(103, 93, 80));
                      btnSearch.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
                      btnSearch.setForeground(new java.awt.Color(255, 255, 255));
                      btnSearch.setText("SEARCH");
                      btnSearch.addActionListener(new java.awt.event.ActionListener() {
                                 public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            btnSearchActionPerformed(evt);
                                 }
                      });

                      btnViewDiagram.setBackground(new java.awt.Color(103, 93, 80));
                      btnViewDiagram.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
                      btnViewDiagram.setForeground(new java.awt.Color(255, 255, 255));
                      btnViewDiagram.setText("VIEW DIAGRAM");
                      btnViewDiagram.addActionListener(new java.awt.event.ActionListener() {
                                 public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            btnViewDiagramActionPerformed(evt);
                                 }
                      });

                      btnCreate.setBackground(new java.awt.Color(103, 93, 80));
                      btnCreate.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
                      btnCreate.setForeground(new java.awt.Color(255, 255, 255));
                      btnCreate.setText("CREATE");
                      btnCreate.addActionListener(new java.awt.event.ActionListener() {
                                 public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            btnCreateActionPerformed(evt);
                                 }
                      });

                      btnDelete.setBackground(new java.awt.Color(103, 93, 80));
                      btnDelete.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
                      btnDelete.setForeground(new java.awt.Color(255, 255, 255));
                      btnDelete.setText("DELETE");
                      btnDelete.addActionListener(new java.awt.event.ActionListener() {
                                 public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            btnDeleteActionPerformed(evt);
                                 }
                      });

                      btnView.setBackground(new java.awt.Color(103, 93, 80));
                      btnView.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
                      btnView.setForeground(new java.awt.Color(255, 255, 255));
                      btnView.setText("VIEW");
                      btnView.addActionListener(new java.awt.event.ActionListener() {
                                 public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            btnViewActionPerformed(evt);
                                 }
                      });

                      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                      this.setLayout(layout);
                      layout.setHorizontalGroup(
                                 layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                 .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                 .addGroup(layout.createSequentialGroup()
                                            .addGap(50, 50, 50)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                       .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                       .addGroup(layout.createSequentialGroup()
                                                                  .addComponent(jLabel2)
                                                                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                  .addComponent(txtCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                  .addGap(55, 55, 55)
                                                                  .addComponent(jLabel3)
                                                                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                  .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                  .addGap(44, 44, 44)
                                                                  .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                 .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGap(257, 257, 257)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                       .addComponent(btnViewDiagram, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                                       .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                                       .addComponent(btnView, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                                       .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                                            .addGap(253, 253, 253))
                      );
                      layout.setVerticalGroup(
                                 layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                 .addGroup(layout.createSequentialGroup()
                                            .addGap(20, 20, 20)
                                            .addComponent(jLabel1)
                                            .addGap(18, 18, 18)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(20, 20, 20)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                       .addComponent(txtCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                       .addComponent(jLabel2)
                                                       .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                       .addComponent(jLabel3)
                                                       .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(26, 26, 26)
                                            .addComponent(btnView, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                                            .addGap(10, 10, 10)
                                            .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btnViewDiagram, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                                            .addGap(26, 26, 26))
                      );
           }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
               // TODO add your handling code here:
               CreateBranchJPanel Panel = new CreateBranchJPanel(userProcessContainer, business, company, SplitPanel);
               SplitPanel.setRightComponent(Panel);
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
               // TODO add your handling code here:
               int selectedRow = manageBranchTbl.getSelectedRow();
               if (selectedRow >= 0) {
                          int dialogButton = JOptionPane.YES_NO_OPTION;
                          int diaogResult = JOptionPane.showConfirmDialog(null, "Would you like to delete the branch details?", "Warning", dialogButton);
                          if (diaogResult == JOptionPane.YES_NO_OPTION) {
                                     Branch branch = (Branch) manageBranchTbl.getValueAt(selectedRow, 0);
                                     company.getBranchList().remove(branch);
                          } else {
                                     JOptionPane.showMessageDialog(null, "Please select a row from table first", "Warning", JOptionPane.WARNING_MESSAGE);
                          }
               }
               populateManageBranchTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
               // TODO add your handling code here:
               int selectedRowIndex = manageBranchTbl.getSelectedRow();
               if (selectedRowIndex < 0) {
                          JOptionPane.showMessageDialog(this, "Please select a Product");
                          return;
               }
               DefaultTableModel model = (DefaultTableModel) manageBranchTbl.getModel();
               Branch branch = (Branch) model.getValueAt(selectedRowIndex, 0);

               ViewBranchJPanel VBPanel = new ViewBranchJPanel(userProcessContainer, business, company, branch, SplitPanel);
               SplitPanel.setRightComponent(VBPanel);
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnViewDiagramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDiagramActionPerformed
               // TODO add your handling code here:
               ViewDiagramJPanel Panel = new ViewDiagramJPanel(userProcessContainer, business, company, SplitPanel);
               SplitPanel.setRightComponent(Panel);
    }//GEN-LAST:event_btnViewDiagramActionPerformed

           private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
                      // TODO add your handling code here:

                      populateSearchBranchTable(txtCountry.getText(), txtLocation.getText());
           }//GEN-LAST:event_btnSearchActionPerformed


           // Variables declaration - do not modify//GEN-BEGIN:variables
           private javax.swing.JButton btnCreate;
           private javax.swing.JButton btnDelete;
           private javax.swing.JButton btnSearch;
           private javax.swing.JButton btnView;
           private javax.swing.JButton btnViewDiagram;
           private javax.swing.JLabel jLabel1;
           private javax.swing.JLabel jLabel2;
           private javax.swing.JLabel jLabel3;
           private javax.swing.JScrollPane jScrollPane1;
           private javax.swing.JTable manageBranchTbl;
           private javax.swing.JTextField txtCountry;
           private javax.swing.JTextField txtLocation;
           // End of variables declaration//GEN-END:variables

           private void populateManageBranchTable() {
                      DefaultTableModel model = (DefaultTableModel) manageBranchTbl.getModel();
                      model.setRowCount(0);
                      for (Branch b : company.getBranchList()) {
                                 Object[] row = new Object[4];
                                 row[0] = b;
                                 row[1] = b.getNation();
                                 row[2] = b.getLocation();
                                 row[3] = b.getAsset();
                                 model.addRow(row);
                      }
           }

           private void populateSearchBranchTable(String country, String location) {
                      DefaultTableModel model = (DefaultTableModel) manageBranchTbl.getModel();
                      model.setRowCount(0);
                      ArrayList<Branch> tempList = new ArrayList<>();
                      //System.out.println(tempList.toString());
                      tempList = bWithCountry(tempList, country);
                      //System.out.println(tempList.toString());
                      tempList = bWithLocation(tempList, location);
                      //System.out.println(tempList.toString());

                      for (Branch b : tempList) {
                                 Object[] row = new Object[4];
                                 row[0] = b;
                                 row[1] = b.getNation();
                                 row[2] = b.getLocation();
                                 row[3] = b.getAsset();
                                 model.addRow(row);
                      }
           }

           private ArrayList<Branch> bWithCountry(ArrayList<Branch> plist, String country) {
                      if (country == null || country.equals("")) {
                                 plist.addAll(company.getBranchList());
                                 //System.out.println("name pass");

                                 return plist;
                      }
                      for (Branch b : company.getBranchList()) {
                                 if (b.getNation().equals(country)) {
                                            plist.add(b);
                                 }
                      }

                      return plist;
           }

           private ArrayList<Branch> bWithLocation(ArrayList<Branch> plist, String location) {
                      if (location == null || location.equals("")) {
                                 //plist.addAll(company.getBranchList());
                                 //System.out.println("name pass");
                                 return plist;
                      }
                      for (int i = 0; i < plist.size(); i++) {

                                 if (!plist.get(i).getLocation().equals(location)) {
                                            plist.remove(plist.get(i));
                                            i -= 1;
                                 }
                      }
                      return plist;
           }

}
